// Stellt Verbindung zur DB her

// Kommando um Tabellen zu erzeugen: npx prisma db push
// Bei Änderungen am Schema: npx prisma generate
// Prisma Studio: npx prisma studio

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// #############################################################################
//
// Jeder Forenthread entspricht einem Event. Ein Event kann mehrere Spiele haben
// und ein Spiel kann zu mehreren Events gehören
//
// #############################################################################

model Event {
    event_id         Int     @id @unique @default(autoincrement())
    event_name       String  @unique
    event_is_current Boolean
    event_album      String
    event_mainPost   String
    event_updatePost String
    game             Game[]
    // GameEvent        GameEvent[]
}

// #############################################################################
//
// Plattformen:
//
// #############################################################################

model Platform {
    platform_id    Int          @id @default(autoincrement())
    platform_name  String       @unique
    platform_image String
    platform_type  PlatformType
    game           Game[]
    // GamePlatform   GamePlatform[]
}

enum PlatformType {
    PC
    Console
    Mobile
    VR
}

// #############################################################################
//
// Spiele
//
// #############################################################################

model Game {
    game_id           Int        @id @default(autoincrement())
    game_name         String     @unique
    game_release_date String
    game_keyart       String
    game_description  String
    game_delta        Boolean
    game_hidden       Boolean
    game_update       Boolean
    game_no_export    Boolean //Falls ein Spiel geupdated werden muss, aber noch keine aktuellen Daten verfügbar sind => Halte Spiel im Reihenupdate
    // GamePlatform      GamePlatform[]
    // GameEvent         GameEvent[]
    Trailer           Trailer[]
    Event             Event      @relation(fields: [eventEvent_id], references: [event_id])
    Platform          Platform[]
    // Event               Event?    @relation(fields: [eventEvent_id], references: [event_id])
    // eventEvent_id       Int?
    // Platform            Platform? @relation(fields: [platformPlatform_id], references: [platform_id])
    // platformPlatform_id Int?
    eventEvent_id     Int
}

// #############################################################################
//
// Trailer
// Ein Trailer hat ein Spiel, ein Spiel hat mehrere Trailer
//
// #############################################################################

model Trailer {
    trailer_id    Int      @id @default(autoincrement())
    trailer_name  String
    trailer_url   String
    trailer_delta Boolean
    trailer_date  DateTime @default(now())
    Game          Game     @relation(fields: [gameGame_id], references: [game_id])
    // game          Game     @relation(fields: [game_key], references: [game_id])
    // game_key      Int
    gameGame_id   Int
}

// #############################################################################
//
// n-zu-n Beziehungen
//
// #############################################################################

// model GamePlatform {
//     game         Game     @relation(fields: [game_key], references: [game_id])
//     game_key     Int
//     platform     Platform @relation(fields: [platform_key], references: [platform_id])
//     platform_key Int

//     @@id([game_key, platform_key])
// }

// model GameEvent {
//     game      Game  @relation(fields: [game_key], references: [game_id])
//     game_key  Int
//     event     Event @relation(fields: [event_key], references: [event_id])
//     event_key Int

//     @@id([game_key, event_key])
// }
